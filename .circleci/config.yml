version: 2.1
jobs:
  build:
    working_directory: /home/circleci/app
    docker:
    - image: circleci/python:3.7-buster-node
    steps:
    - checkout
    - setup_remote_docker
    - run:
        name: Install modules
        command: |
          sudo apt-get update
          sudo apt-get install -y libgeos-dev # Required for shapely
          sudo yarn global add @mapbox/cfn-config @mapbox/cloudfriend
          sudo pip3 install awscli --upgrade
    - run:
        name: Set folder permissions
        command: |
          chown -R circleci:circleci ${CIRCLE_WORKING_DIRECTORY}
          chmod -R 755 ${CIRCLE_WORKING_DIRECTORY}
    - restore_cache:
        keys:
        - node-v1-{{ .Branch }}-{{ checksum "frontend/yarn.lock" }}
        - node-v1-{{ .Branch }}-
        - node-v1-
    - run:
        name: Install requirements
        command: |
          # Install NPM packages and build frontend
          cd ${CIRCLE_WORKING_DIRECTORY}/frontend
          yarn
          npm rebuild node-sass
          cd ${CIRCLE_WORKING_DIRECTORY}
          # Install Python dependencies
          pip install virtualenv
          virtualenv env
          ${CIRCLE_WORKING_DIRECTORY}/env/bin/pip install --upgrade pip
          ${CIRCLE_WORKING_DIRECTORY}/env/bin/pip install -r requirements.txt
    - run:
        name: Run backend code checks
        command: |
          cd ${CIRCLE_WORKING_DIRECTORY}
          mkdir ${CIRCLE_WORKING_DIRECTORY}/tests/backend/lint
          . ${CIRCLE_WORKING_DIRECTORY}/env/bin/activate
          black --check manage.py backend tests migrations
          flake8 manage.py backend tests migrations
    - run:
        name: Run frontend tests
        command: |
          # JS Unit Tests
          cd ${CIRCLE_WORKING_DIRECTORY}/frontend
          CI=true yarn test -w 1
          CI=true GENERATE_SOURCEMAP=false yarn build
    # - run:
    #     name: Run backend tests
    #     command: |
    #       # Run Python tests
    #       cd ${CIRCLE_WORKING_DIRECTORY}
    #       mkdir ${CIRCLE_WORKING_DIRECTORY}/tests/backend/results
    #       find ./tests/backend -name "test*.py" -exec chmod -x {} \;
    #       env/bin/nosetests ./tests/backend --with-xunit \
    #         --xunit-file ${CIRCLE_WORKING_DIRECTORY}/tests/backend/results/unitresults.xml \
    #         --with-coverage --cover-erase --cover-package=./backend
    #       env/bin/coverage xml -o ${CIRCLE_WORKING_DIRECTORY}/tests/backend/results/coverage.xml
    # - store_test_results:
    #     path: tests/backend/results
    # - store_artifacts:
    #     path: tests/backend/results
    - save_cache:
        key: node-v1-{{ .Branch }}-{{ checksum "frontend/yarn.lock" }}
        paths:
        - frontend/node_modules
        - env
  backend_deploy:
    parameters:
      stack_name:
        description: "the name of the stack for cfn-config"
        type: string
    working_directory: /home/circleci/tasking-manager
    docker:
    - image: circleci/python:3.7-buster-node
    steps:
    - checkout
    - setup_remote_docker
    - run:
        name: Set Environment Variables
        command: |
          echo "export JSON_CONFIG='{\"GitSha\": \"$CIRCLE_SHA1\", \"NetworkEnvironment\": \"${ENVIRONMENT_NAME}\", \"AutoscalingPolicy\": \"${AUTOSCALING_POLICY}\", \"DBSnapshot\": \"\", \"DatabaseDump\": \"\", \"NewRelicLicense\": \"${NEW_RELIC_LICENSE}\", \"PostgresDB\": \"${POSTGRES_DB}\", \"PostgresPassword\": \"${POSTGRES_PASSWORD}\", \"PostgresUser\": \"${<POSTGRES_USER}\", \"DatabaseSize\": \"${DB_SIZE}\", \"ELBSubnets\": \"${ELB_SUBNETS}\", \"SSLCertificateIdentifier\": \"${SSL_CERTIFICATE_ID}\", \"TaskingManagerLogDirectory\": \"${TM_LOG_DIR}\", \"TaskingManagerConsumerKey\": \"${TM_CONSUMER_KEY}\", \"TaskingManagerConsumerSecret\": \"${TM_CONSUMER_SECRET}\", \"TaskingManagerSecret\": \"${TM_SECRET}\", \"TaskingManagerLogLevel\": \"${TM_LOG_LEVEL}\", \"TaskingManagerImageUploadAPIURL\": \"${TM_IMAGE_UPLOAD_API_URL}\", \"TaskingManagerImageUploadAPIKey\": \"${TM_IMAGE_UPLOAD_API_KEY}\", \"TaskingManagerURL\": \"${TM_APP_URL}\", \"TaskingManagerOrgName\": \"${TM_ORG_NAME}\", \"TaskingManagerOrgCode\": \"${TM_ORG_CODE}\", \"SentryBackendDSN\": \"${TM_SENTRY_BACKEND_DSN}\", \"TaskingManagerEmailContactAddress\": \"${TM_EMAIL_CONTACT_ADDRESS}\"}'" >> $BASH_ENV
    - run:
        name: Install modules
        command: |
          sudo apt-get update
          sudo apt-get install -y libgeos-dev # Required for shapely
          sudo yarn global add @mapbox/cfn-config @mapbox/cloudfriend
          sudo pip3 install awscli --upgrade
    - run:
        name: Configure AWS Access Key ID
        command: |
          aws configure set aws_access_key_id \
          $AWS_ACCESS_KEY_ID \
          --profile default
    - run:
        name: Configure AWS Secret Access Key
        command: |
          aws configure set aws_secret_access_key \
          $AWS_SECRET_ACCESS_KEY \
          --profile default
    - run:
        name: Configure AWS default region
        command: |
          aws configure set region $AWS_REGION \
          --profile default
    - run:
        name: Get RDS Instance ID
        command: |
          chmod +x .circleci/rdsid.sh
          RDS_ID=$(./.circleci/rdsid.sh '{"aws:cloudformation:stack-name": "tasking-manager-<< parameters.stack_name >>"}')
          echo "export RDS_ID=$RDS_ID" >> $BASH_ENV
    - run:
        name: Remove last snapshot and backup database
        no_output_timeout: 15m
        command: |
          DESCRIBE_SNAPSHOT=$(aws rds describe-db-snapshots --db-snapshot-identifier tm3-<< parameters.stack_name >>-$RDS_ID-latest --db-instance-identifier $RDS_ID --output text)
          NONCE=$(openssl rand -hex 4)
          echo "export NONCE=$NONCE" >> $BASH_ENV
          # Copy old snapshot to temporary
          if [ -z "$DESCRIBE_SNAPSHOT" ]
          then
              echo "Snapshot does not exist, creating one now."
          else
              aws rds copy-db-snapshot \
                      --source-db-snapshot tm3-<< parameters.stack_name >>-${RDS_ID}-latest \
                      --target-db-snapshot tm3-<< parameters.stack_name >>-${RDS_ID}-${NONCE}
              aws rds delete-db-snapshot \
                      --db-snapshot-identifier tm3-<< parameters.stack_name >>-${RDS_ID}-latest
          fi
          # create new aws rds snapshot
          aws rds create-db-snapshot \
                      --db-snapshot-identifier tm3-<< parameters.stack_name >>-${RDS_ID}-latest \
                      --db-instance-identifier ${RDS_ID}
          aws rds wait db-snapshot-completed \
                      --db-snapshot-identifier tm3-<< parameters.stack_name >>-${RDS_ID}-latest \
                      --db-instance-identifier ${RDS_ID}
          if [[ $? -eq 255 ]]; then
            echo "Production snapshot creation failed. Exiting with exit-code 125"
            exit 125
          fi
    - run:
        name: Create config file
        command: |
          touch $CIRCLE_WORKING_DIRECTORY/cfn-config-<< parameters.stack_name >>.json
          echo $JSON_CONFIG > $CIRCLE_WORKING_DIRECTORY/cfn-config-<< parameters.stack_name >>.json
    - deploy:
        name: Deploy to << parameters.stack_name >>
        command: |
          export NODE_PATH=/usr/local/share/.config/yarn/global/node_modules/
          validate-template $CIRCLE_WORKING_DIRECTORY/scripts/aws/cloudformation/tasking-manager.template.js
          cfn-config update << parameters.stack_name >> $CIRCLE_WORKING_DIRECTORY/scripts/aws/cloudformation/tasking-manager.template.js -f -c hot-cfn-config -t hot-cfn-config -r $AWS_REGION -p "$JSON_CONFIG"
    - run:
        name: Cleanup
        when: always
        command: |
          DESCRIBE_SNAPSHOT=$(aws rds describe-db-snapshots --db-snapshot-identifier tm3-<< parameters.stack_name >>-${RDS_ID}-${NONCE} --db-instance-identifier ${RDS_ID} --output text)
          # Copy old snapshot to temporary
          if [ -z "$DESCRIBE_SNAPSHOT" ]
          then
            echo "temporary snapshot doesn't exist, nothing to cleanup."
          else
            aws rds delete-db-snapshot --db-snapshot-identifier tm3-<< parameters.stack_name >>-${RDS_ID}-${NONCE}
          fi
          # Delete manual snapshot if database ID changed
          RDS_ID_NEW=$(./.circleci/rdsid.sh '{"aws:cloudformation:stack-name": "tasking-manager-<< parameters.stack_name >>"}')
          if [ "$RDS_ID" != "$RDS_ID_NEW" ]
          then
            aws rds delete-db-snapshot --db-snapshot-identifier tm3-<< parameters.stack_name >>-${RDS_ID}-latest
          fi
  frontend_deploy:
    working_directory: /home/circleci/tasking-manager
    docker:
    - image: circleci/python:3.7-buster-node
    parameters:
      stack_name:
        description: "the name of the stack for cfn-config"
        type: string
    steps:
    - checkout
    - setup_remote_docker
    - run:
        name: Install modules
        command: |
          sudo pip3 install awscli --upgrade
    - run:
        name: Configure AWS Access Key ID
        command: |
          aws configure set aws_access_key_id \
          $AWS_ACCESS_KEY_ID \
          --profile default
    - run:
        name: Configure AWS Secret Access Key
        command: |
          aws configure set aws_secret_access_key \
          $AWS_SECRET_ACCESS_KEY \
          --profile default
    - run:
        name: Configure AWS default region
        command: |
          aws configure set region $AWS_REGION \
          --profile default
    - run:
        name: Deploy Frontend to S3
        command: |
          cd ${CIRCLE_WORKING_DIRECTORY}/frontend/
          export TM_ENVIRONMENT=<< parameters.stack_name >>
          yarn
          CI=true GENERATE_SOURCEMAP=false yarn build
          aws s3 sync build/ s3://tasking-manager-<< parameters.stack_name >>-react-app --delete
          export DISTRIBUTION_ID=`aws cloudformation list-exports --output=text --query "Exports[?Name=='tasking-manager-<< parameters.stack_name >>-cloudfront-id-${AWS_REGION}'].Value"`
          aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"
workflows:
  version: 2
  build-deploy:
    jobs:
    - build:
        filters:
          branches:
            ignore:
            - /^deployment\/.*/
    - backend_deploy:
        name: staging
        filters:
          branches:
            only:
            - develop
        requires:
          - build
        stack_name: "staging"
        context: tasking-manager-staging
    - frontend_deploy:
        name: staging
        filters:
          branches:
            only:
            - develop
        requires:
          - build
        context: tasking-manager-staging
        stack_name: "staging"

    - backend_deploy:
        name: test
        filters:
          branches:
            only:
            - fix/sentry-environments
        requires:
          - build
        stack_name: "test"
        context: tasking-manager-staging
    - frontend_deploy:
        name: test
        filters:
          branches:
            only:
            - fix/sentry-environments
        requires:
          - build
        context: tasking-manager-staging
        stack_name: "test"

    - backend_deploy:
        name: teachosm
        filters:
          branches:
            only:
              - deployment/teachosm-tasking-manager
        requires:
          - build
        stack_name: "teachosm"
        context: tasking-manager-teachosm
    - frontend_deploy:
        name: teachosm
        filters:
          branches:
            only:
              - deployment/teachosm-tasking-manager
        requires:
          - build
        context: tasking-manager-teachosm
        stack_name: "teachosm"
    - backend_deploy:
        name: assisted
        filters:
          branches:
            only:
              - deployment/assisted-tasking-manager
        requires:
          - build
        stack_name: "assisted"
        context: tasking-manager-assisted
    - frontend_deploy:
        name: assisted
        filters:
          branches:
            only:
              - deployment/assisted-tasking-manager
        requires:
          - build
        stack_name: "assisted"
        context: tasking-manager-assisted
  backend-production:
    jobs:
    - backend_deploy:
        name: production
        filters:
          branches:
            only:
              - deployment/hot-tasking-manager
        stack_name: "tm4-production"
        context: tasking-manager-tm4-production
  frontend-production:
    jobs:
    - frontend_deploy:
        name: production
        filters:
          branches:
            only:
              - deployment/hot-tasking-manager-frontend
              - deployment/hot-tasking-manager
        stack_name: "tm4-production"
        context: tasking-manager-tm4-production
